Workout AI Trainer - MVP (v0.1):

  Sprint 1 - Core Auth & Basic UI (1 week, 20 hours):
    User Authentication:
      ✔ Create GCP Project @done(2024-03-18)
      ✔ Create Google OAUTH Credentials for project @done(2024-03-18)
      ✔ Create Apple OAUTH Credentials for project @started(25-03-18 09:34) @done(25-03-20 22:40) @lasted(2d13h6m16s)
        Notes: Apple Developer Account Required.  My Apple developer account is pending approval (24-48 hours).
      ✔ Add authentication middleware @P0 @5h @id(auth) @sprint(1) @started(2024-03-18 09:54) @done(25-03-20 22:40) @lasted(5y3d12h46m18s)
          Notes: JWT-based auth for user sessions. Paused until Apple Developer account is approved.
      ✔ Implement user registration endpoint @P0 @3h @id(user-reg) @sprint(1) @done(25-03-20 22:40)
          Notes: Email/password registration. Paused until authentication middleware is complete.
      ✔ Implement user login endpoint @P0 @2h @id(user-login) @depends(auth) @sprint(1) @done(25-03-20 22:40)
          Notes: JWT token generation and validation
    
    Basic UI Setup:
      ✔ Create React/Next.js project structure @P0 @2h @id(ui-setup) @sprint(1) @started(25-03-21 11:00) @done(25-03-21 14:40) @lasted(3h40m18s)
        Notes: TypeScript + Tailwind CSS setup
      ☐ Implement registration page @P0 @3h @id(reg-page) @depends(ui-setup) @sprint(1) @started(25-03-21 14:47)
          Notes: Form with email/password fields
      ☐ Implement login page @P0 @3h @id(login-page) @depends(ui-setup) @sprint(1) @started(25-03-24 17:20)
          Notes: Form with email/password fields
      ☐ Add protected route wrapper @P0 @2h @id(protected-routes) @depends(login-page) @sprint(1)
          Notes: Redirect unauthorized users to login
    
  Sprint 2 - Core WOD Features (1 week, 25 hours):
    WOD API:
      ☐ Implement WOD pagination @P0 @4h @id(wod-pagination) @sprint(1)
          Notes: Limit and offset for pagination
      ☐ Add date range filter for WODs @P0 @3h @id(wod-date-filter) @sprint(1)
          Notes: Filter WODs by creation date range
    Essential Error Handling:
        ☐ Add proper error handling for database connection failures @P0 @2h @id(db-error) @sprint(2)
            Notes: Critical for application stability
        ☐ Add proper error handling for OpenAI API failures @P0 @3h @id(openai-error) @sprint(2)
            Notes: Essential as OpenAI is the core service
        ☐ Add basic input validation @P0 @2h @id(basic-valid) @sprint(2)
            Notes: Prevent invalid WOD requests
    
    WOD Generation UI:
        ☐ Create WOD request form @P0 @4h @id(wod-form) @sprint(2)
            Notes: Form with essential workout preferences
        ☐ Implement WOD display component @P0 @3h @id(wod-display) @sprint(2)
            Notes: Display generated workout details
        ☐ Add WOD history page @P0 @3h @id(wod-history) @sprint(2)
            Notes: List of user's past workouts
        ☐ Add loading states and basic error messages @P0 @2h @id(ui-feedback) @sprint(2)
            Notes: User feedback during API calls
    
    API Integration:
        ☐ Implement basic rate limiting for OpenAI API @P0 @3h @id(basic-rate-limit) @sprint(2)
            Notes: Prevent API quota exhaustion
            Subtasks:
            - Implement token-based rate limiting for OpenAI API calls
            - Set up monitoring for OpenAI API usage
            - Add error handling for rate limit exceeded
            - Implement exponential backoff strategy
            - Add logging for rate limit events
            - Consider implementing a queue system for high-demand periods

        ☐ Add TypeScript types for API responses @P0 @3h @id(types) @sprint(2)
            Notes: Type safety for API integration
  
  Sprint Summary:
  Sprint 1 (20h): WOD GET API, Core Auth & Basic UI
  - Focus: User authentication and basic UI setup
  - Key Deliverables: Registration, login, protected routes
  - Dependencies: None
  
  Sprint 2 (25h): Core WOD Features
  - Focus: Essential WOD generation and display, WOD API (GET all user WODs)
  - Key Deliverables: WOD form, display, history, basic error handling, WOD API (GET all user WODs)
  - Dependencies: Authentication from Sprint 1
  
  Total MVP Time: 45 hours
  MVP Duration: 2 weeks
  
  Future Improvements (v0.2):
  ☐ Enhanced Features:
      ☐ Add request timeout handling @P1 @2h
      ☐ Add retry logic for failed API calls @P1 @3h
      ☐ Add rate limiting per user @P1 @3h
          Notes: Implement Redis-based rate limiting with endpoint-specific rules
          Subtasks:
          - WOD Generation Rate Limiting (P0)
            * Limit to 3 WOD generations per user per day (midnight to midnight)
            * Implement daily reset mechanism
            * Add user-friendly error messages
            * Add remaining attempts count to response headers
            * Add rate limit status endpoint for users to check remaining attempts
            * Store rate limit data in Redis with TTL
          - Workout API Rate Limiting (P1)
            * Set reasonable limits for workout creation (e.g., 10 per hour)
            * Set limits for workout retrieval (e.g., 100 per hour)
            * Implement IP-based rate limiting for public endpoints
            * Add rate limit status to response headers
          - Auth Endpoint Rate Limiting (P1)
            * Limit login attempts (e.g., 5 per minute)
            * Limit password reset requests (e.g., 3 per hour)
            * Implement IP-based blocking for suspicious activity
            * Add CAPTCHA for repeated failed attempts
          - General API Rate Limiting (P1)
            * Set default rate limits for all endpoints
            * Implement different limits for authenticated vs unauthenticated users
            * Add rate limit information to API documentation
            * Set up monitoring dashboard for rate limit events

  ☐ AI Coach Profiles Feature:
      ☐ Design coach personality system @P1 @6h @id(coach-design)
          Notes: Define coach attributes, personality traits, and experience templates
      ☐ Create coach profile database schema @P1 @3h @id(coach-schema) @depends(coach-design)
          Notes: Store coach backgrounds, specialties, and system prompts
      ☐ Implement coach profile management API @P1 @4h @id(coach-api) @depends(coach-schema)
          Notes: CRUD operations for coach profiles
      ☐ Add coach selection UI @P1 @5h @id(coach-ui) @depends(coach-api)
          Notes: Browse and select coaches with personality previews
      ☐ Enhance WOD generation with coach personalities @P1 @8h @id(coach-wod) @depends(coach-api)
          Notes: Integrate coach's background into LLM prompt
      ☐ Add coach feedback system @P2 @6h @id(coach-feedback) @depends(coach-wod)
          Notes: Personalized feedback based on coach's style
      ☐ Create sample coach profiles @P1 @4h @id(coach-samples) @depends(coach-design)
          Notes: Define 5-10 distinct coach personalities
          Examples:
          - "The Motivator": High-energy, positive reinforcement
          - "The Veteran": Ex-military, disciplined approach
          - "The Scientist": Data-driven, scientific explanations
          - "The Competitor": Former athlete, competition-focused
          - "The Holistic Coach": Mind-body wellness approach
  
  ☐ Testing & Documentation:
      ☐ Add test suite for API endpoints @P1 @8h
      ☐ Add API documentation using OpenAPI/Swagger @P2 @4h
      ☐ Add proper JSDoc comments @P3 @2h
  
  ☐ UI Enhancements:
      ☐ Add user profile page @P2 @4h
      ☐ Add workout preferences page @P2 @4h
      ☐ Add exercise library @P2 @6h
      ☐ Add progress tracking @P2 @8h
      ☐ Add coach profile customization page @P2 @5h
          Notes: Allow users to save preferred coaches
  
  ☐ Performance & Security:
      ☐ Add input sanitization @P1 @2h
      ☐ Add request size limits @P2 @1h
      ☐ Add logging middleware @P2 @3h
      ☐ Implement advanced error handling @P2 @4h
  
  Total v0.2 Time: ~93 hours
  Key Features:
  - Enhanced error handling and performance
  - AI Coach personality system
  - Improved UI and user experience
  - Comprehensive testing and documentation
  
  Archive:
    ✔ Add OpenAIError interface for type safety @done(2024-03-20)
    ✔ Fix error handling in createWod @done(2024-03-20)
    ✔ Implement basic WOD creation endpoint @done(2024-03-20)
    ✔ Implement basic WOD retrieval endpoint @done(2024-03-20) 